# Respons√°vel por: executar TODOS os extratores E transformadores em sequ√™ncia
# Este script mant√©m o DW sincronizado com a Bling
# Na fase de gerar o fluxos de trabalho (workflows), esse scrip ser√° executado a cada 2 horas (Solicita√ß√£o do cliente)

from datetime import datetime
from sqlalchemy import text
from config.database import create_schema_raw, create_schema_processed, create_all_tables, Session
from extract.contacts import ContatosCompletoExtractor
from extract.products import ProdutosExtractor
from extract.sales import VendasExtractor
from extract.sales_details import VendasDetalhesExtractor
from transform.contacts_dw import ContatosTransformer
from transform.products_dw import ProdutosTransformer
from transform.sales_dw import VendasTransformer

# =====================================================
# 1. EXECU√á√ÉO COMPLETA - EXTRA√á√ÉO
# =====================================================

def executar_extracao_completa():
    """
    Executa a extra√ß√£o de todos os endpoints em sequ√™ncia
    
    FLUXO DE EXTRA√á√ÉO:
    1. Contatos (lista + detalhes individuais)
    2. Produtos (lista completa)
    3. Vendas (lista resumida)
    4. Vendas Detalhes (itens de cada pedido)
    """
    print("\nüöÄ FASE 1: EXTRA√á√ÉO COMPLETA DE TODOS OS ENDPOINTS")
    print("=" * 60)
    
    inicio_extracao = datetime.now()
    
    # Lista dos extratores para executar
    extratores = [
        ("üë• CONTATOS", ContatosCompletoExtractor),
        ("üè≠ PRODUTOS", ProdutosExtractor), 
        ("üí∞ VENDAS (Lista)", VendasExtractor),
        ("üõí VENDAS (Detalhes + Itens)", VendasDetalhesExtractor)
    ]
    
    resultados_extracao = []
    
    for nome_endpoint, ExtractorClass in extratores:
        try:
            print(f"\n{nome_endpoint}")
            print("-" * 50)
            
            inicio_endpoint = datetime.now()
            
            # Criar e executar o extrator
            extrator = ExtractorClass()
            
            # Verificar se √© o extrator de detalhes de vendas
            if ExtractorClass == VendasDetalhesExtractor:
                # Executar com configura√ß√µes espec√≠ficas
                extrator.executar_extracao_detalhes(
                    delay_entre_requests=0.4,
                    batch_size=100
                )
            else:
                # Executar normalmente
                extrator.executar_extracao_completa()
            
            fim_endpoint = datetime.now()
            tempo_endpoint = fim_endpoint - inicio_endpoint
            
            resultados_extracao.append({
                'endpoint': nome_endpoint,
                'status': 'SUCCESS',
                'tempo': tempo_endpoint
            })
            
            print(f"‚úÖ {nome_endpoint} conclu√≠do em {tempo_endpoint}")
            
        except Exception as e:
            fim_endpoint = datetime.now()
            tempo_endpoint = fim_endpoint - inicio_endpoint
            
            resultados_extracao.append({
                'endpoint': nome_endpoint,
                'status': 'ERROR',
                'tempo': tempo_endpoint,
                'erro': str(e)
            })
            
            print(f"‚ùå ERRO em {nome_endpoint}: {e}")
            print("Continuando com pr√≥ximo endpoint...")
    
    # Relat√≥rio extra√ß√£o
    fim_extracao = datetime.now()
    tempo_extracao = fim_extracao - inicio_extracao
    
    print(f"\n‚úÖ EXTRA√á√ÉO COMPLETA FINALIZADA")
    print("=" * 60)
    print(f"‚è±Ô∏è Tempo total: {tempo_extracao}")
    print("\nüìä RESUMO DOS RESULTADOS:")
    
    sucessos = 0
    erros = 0
    
    for resultado in resultados_extracao:
        status_emoji = "‚úÖ" if resultado['status'] == 'SUCCESS' else "‚ùå"
        print(f"{status_emoji} {resultado['endpoint']}: {resultado['tempo']}")
        
        if resultado['status'] == 'SUCCESS':
            sucessos += 1
        else:
            erros += 1
            print(f"   ‚îî‚îÄ‚îÄ Erro: {resultado.get('erro', 'N/A')}")
    
    print(f"\nüéØ ESTAT√çSTICAS FINAIS DA EXTRA√á√ÉO:")
    print(f"‚úÖ Sucessos: {sucessos}/{len(extratores)}")
    print(f"‚ùå Erros: {erros}/{len(extratores)}")
    
    return resultados_extracao

# =====================================================
# 2. EXECU√á√ÉO COMPLETA - TRANSFORMA√á√ÉO
# =====================================================

def executar_transformacao_completa():
    """
    Executa a transforma√ß√£o de todos os dados RAW para DW
    
    FLUXO DE TRANSFORMA√á√ÉO:
    1. Resetar status_processamento (reprocessar tudo)
    2. Transformar Contatos ‚Üí dim_contatos
    3. Transformar Produtos ‚Üí dim_produtos
    4. Transformar Vendas ‚Üí fato_pedidos
    """
    print(f"\n{'='*60}")
    print("üîÑ FASE 2: TRANSFORMA√á√ÉO DOS DADOS")
    print(f"{'='*60}")
    
    inicio_transformacao = datetime.now()
    
    # Resetar status para reprocessar todos os registros
    print("\n‚ñ∂Ô∏è  Resetando status_processamento...")
    session = Session()
    try:
        session.execute(text("UPDATE raw.contatos_raw SET status_processamento = 'pendente'"))
        session.execute(text("UPDATE raw.produtos_raw SET status_processamento = 'pendente'"))
        session.execute(text("UPDATE raw.vendas_raw SET status_processamento = 'pendente'"))
        session.commit()
        print("‚úÖ Status resetado - todos os registros ser√£o reprocessados")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao resetar status: {e}")
        session.rollback()
    finally:
        session.close()
    
    # Executar transforma√ß√µes
    transformadores = [
        ("üë• CONTATOS", ContatosTransformer),
        ("üè≠ PRODUTOS", ProdutosTransformer),
        ("üí∞ VENDAS", VendasTransformer)
    ]
    
    resultados_transformacao = []
    
    for nome, Transformer in transformadores:
        try:
            print(f"\n{nome}")
            print("-" * 50)
            
            inicio_transform = datetime.now()
            
            transformer = Transformer()
            transformer.executar_transformacao_completa()
            
            fim_transform = datetime.now()
            tempo_transform = fim_transform - inicio_transform
            
            resultados_transformacao.append({
                'transformador': nome,
                'status': 'SUCCESS',
                'tempo': tempo_transform
            })
            
            print(f"‚úÖ {nome} transformado em {tempo_transform}")
            
        except Exception as e:
            fim_transform = datetime.now()
            tempo_transform = fim_transform - inicio_transform
            
            resultados_transformacao.append({
                'transformador': nome,
                'status': 'ERROR',
                'tempo': tempo_transform,
                'erro': str(e)
            })
            
            print(f"‚ùå ERRO ao transformar {nome}: {e}")
    
    # Relat√≥rio transforma√ß√£o
    fim_transformacao = datetime.now()
    tempo_transformacao = fim_transformacao - inicio_transformacao
    
    print(f"\n‚úÖ TRANSFORMA√á√ÉO COMPLETA FINALIZADA")
    print("=" * 60)
    print(f"‚è±Ô∏è Tempo total: {tempo_transformacao}")
    print("\nüìä RESUMO DOS RESULTADOS:")
    
    sucessos = 0
    erros = 0
    
    for resultado in resultados_transformacao:
        status_emoji = "‚úÖ" if resultado['status'] == 'SUCCESS' else "‚ùå"
        print(f"{status_emoji} {resultado['transformador']}: {resultado['tempo']}")
        
        if resultado['status'] == 'SUCCESS':
            sucessos += 1
        else:
            erros += 1
            print(f"   ‚îî‚îÄ‚îÄ Erro: {resultado.get('erro', 'N/A')}")
    
    print(f"\nüéØ ESTAT√çSTICAS FINAIS DA TRANSFORMA√á√ÉO:")
    print(f"‚úÖ Sucessos: {sucessos}/{len(transformadores)}")
    print(f"‚ùå Erros: {erros}/{len(transformadores)}")
    
    return resultados_transformacao

# =====================================================
# 3. PIPELINE COMPLETO
# =====================================================

def executar_pipeline_completo():
    """
    Executa o pipeline completo: Extra√ß√£o + Transforma√ß√£o
    Este √© o script principal para manter o DW atualizado
    """
    print("\n" + "=" * 70)
    print("üîÑ PIPELINE COMPLETO: EXTRA√á√ÉO + TRANSFORMA√á√ÉO")
    print("=" * 70)
    print("Mant√©m o Data Warehouse sincronizado com a Bling")
    print("Recomendado: Executar a cada 2 horas - Solicita√ß√£o do cliente")
    print("=" * 70)
    
    inicio_pipeline = datetime.now()
    
    # FASE 1: Extra√ß√£o
    resultados_extracao = executar_extracao_completa()
    
    # FASE 2: Transforma√ß√£o
    resultados_transformacao = executar_transformacao_completa()
    
    # Relat√≥rio final consolidado
    fim_pipeline = datetime.now()
    tempo_total = fim_pipeline - inicio_pipeline
    
    print(f"\n{'='*70}")
    print(f"üèÅ PIPELINE COMPLETO FINALIZADO")
    print(f"{'='*70}")
    print(f"‚è±Ô∏è  Tempo total do pipeline: {tempo_total}")
    
    # Estat√≠sticas consolidadas
    total_extracao = len(resultados_extracao)
    sucesso_extracao = sum(1 for r in resultados_extracao if r['status'] == 'SUCCESS')
    
    total_transformacao = len(resultados_transformacao)
    sucesso_transformacao = sum(1 for r in resultados_transformacao if r['status'] == 'SUCCESS')
    
    print(f"\nüìä RESUMO GERAL:")
    print(f"   ‚Ä¢ Extra√ß√£o: {sucesso_extracao}/{total_extracao} sucessos")
    print(f"   ‚Ä¢ Transforma√ß√£o: {sucesso_transformacao}/{total_transformacao} sucessos")
    
    if sucesso_extracao == total_extracao and sucesso_transformacao == total_transformacao:
        print(f"\nüéâ TODOS OS PROCESSOS EXECUTADOS COM SUCESSO!")
        print(f"\nüí° PR√ìXIMOS PASSOS:")
        print(f"   1. Dados est√£o sincronizados com a Bling")
        print(f"   2. Power BI pode ser atualizado")
        print(f"   3. Execute novamente em 2 horas para manter atualizado")
    else:
        print(f"\n‚ö†Ô∏è  Alguns processos falharam. Verifique os logs acima.")

if __name__ == "__main__":
    try:
        # Cria os schemas se n√£o existirem
        create_schema_raw()
        create_schema_processed()

        # Cria as tabelas
        create_all_tables()

        # Executar pipeline completo
        executar_pipeline_completo()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
        print("üíæ Dados processados at√© este ponto foram preservados")
        print("Voc√™ pode continuar executando novamente este script")
    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO durante execu√ß√£o: {e}")
        print("Script interrompido para an√°lise do erro")
        raise
